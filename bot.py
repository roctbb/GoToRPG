import random
from datetime import datetime

from init import *
import config
import importlib
import time
import threading


def life_support():
    while True:
        hour = datetime.now().hour

        if hour == 1:
            for user in users:
                if "toxic" in user['states']:
                    bot.send_message(user['chat_id'], "–§—É—Ö, –∫–∞–∂–µ—Ç—Å—è, –≤–∞—Å –Ω–∞–∫–æ–Ω–µ—Ü –æ—Ç–ø—É—Å–∫–∞–µ—Ç. –í—ã –±–æ–ª—å—à–µ –Ω–µ toxic.")
                    user['states'].remove("toxic")
                if "punished" in user['states']:
                    bot.send_message(user['chat_id'], "–í—ã –æ–±–¥—É–º–∞–ª–∏ —Å–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ —É—Å–ø–æ–∫–æ–∏–ª–∏—Å—å. –í—ã –±–æ–ª—å—à–µ –Ω–µ punished.")
                    user['states'].remove("punished")
                if "medical_outlet" in user['states']:
                    bot.send_message(user['chat_id'], "–ú–µ–¥–æ—Ç–≤–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç.")
                    user['inventory'].remove("medical_outlet")

        for user in users:
            check_params(user)

            # –µ–¥–∞
            if user['eat_points'] != 0:
                user['eat_points'] -= 1
            else:
                bot.send_message(user['chat_id'], "‚òπÔ∏è –í—ã –æ—á–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –µ—Å—Ç—å...")

            if user['sleep_points'] != 0:
                user['sleep_points'] -= 1
            else:
                bot.send_message(user['chat_id'], "üò¥ –í—ã –æ—á–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ç—å...")

            # –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ
            if "wet" in user['states'] and "sick" not in user['states'] and random.randint(1, 20) == 1:
                bot.send_message(user['chat_id'],
                                 "ü§ß –í—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ —Ö–æ–¥–∏–ª–∏ –º–æ–∫—Ä—ã–º –∏ –ø—Ä–æ—Å—Ç—É–¥–∏–ª–∏—Å—å. –ß—Ç–æ–±—ã –ø–æ–¥–ª–µ—á–∏—Ç—å—Å—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –≤ –º–µ–¥–ø—É–Ω–∫—Ç.")
                user['states'].append('sick')

        for location in locations:
            try:
                location_module = importlib.import_module(location['file'])
                location_module.event(find_users_by_location(location['id']), location, bot)
            except Exception as e:
                print(e)

        save()
        time.sleep(5 * 60)





@bot.message_handler(content_types=['sticker'])
def print_sticker(message):
    print(message.sticker.file_id)


@bot.message_handler(content_types=['text'])
def process_message(message):
    user = find_user(message.chat.id)

    if not user:
        init(message.chat.id)
        return

    if "name" not in user:
        if " " in message.text:
            bot.send_message(user['chat_id'], "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã.")
        else:
            save_name(user, message.text)
        return

    check_params(user)

    if "/info" in message.text:
        description = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ.\n" \
                      "\n" \
                      "–ò–º—è –∏–≥—Ä–æ–∫–∞: {}\n" \
                      "–õ–æ–∫–∞—Ü–∏—è: {}\n" \
                      "–°—ã—Ç–æ—Å—Ç—å: {}\n" \
                      "–ë–æ–¥—Ä–æ—Å—Ç—å: {}\n" \
                      "–†—é–∫–∑–∞–∫: {}\n" \
                      "–°–æ—Å—Ç–æ—è–Ω–∏—è: {}\n".format(user['name'], user['location'], user['eat_points'], user['sleep_points'],
                                             ' / '.join(user['inventory']), ' / '.join(user['states']))
        bot.send_message(user['chat_id'], description)
        return

    if "/locations" in message.text:
        bot.send_message(user['chat_id'], location_list())

    if "/leaderboard" in message.text:
        bot.send_message(user['chat_id'], leaderboard())

    if "/help" in message.text:
        help(user)

    if "/goto" in message.text:
        try:
            cmd, location_id = message.text.split(' ')
            location = change_location_by_id(user, location_id)

            try:
                location_module = importlib.import_module(location['file'])
                location_module.welcome(user, location, bot)
            except Exception as e:
                print(e)

            return
        except Exception as e:
            print(e)
            bot.send_message(user["chat_id"], "üëÄ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏.")
            return

    location = find_location(user['location'])
    users = find_users_by_location(user['location'])

    try:
        location_module = importlib.import_module(location['file'])
        location_module.message(message, user, location, users, bot)
    except Exception as e:
        print(e)

    save()


life_thread = threading.Thread(target=life_support)
life_thread.start()

try:
    while True:
        bot.polling()
except Exception as e:
    print(e)
