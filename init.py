import telebot
import config
import json
import pytz

bot = telebot.TeleBot(token=config.TOKEN)

default_locations = [
    {
        "id": "street",
        "file": "locations.street",
        "name": "–£–ª–∏—Ü–∞"
    },
    {
        "id": "home",
        "file": "locations.home",
        "name": "–î–æ–º–∏–∫"
    },
    {
        "id": "med_house",
        "file": "locations.med_house",
        "name": "–ú–µ–¥–ø—É–Ω–∫—Ç"
    },
    {
        "id": "korostel",
        "file": "locations.korostel",
        "name": "–ö–æ—Ä–æ—Å—Ç–µ–ª—å"
    },
    {
        "id": "hunter_house",
        "file": "locations.hunter_house",
        "name": "–î–æ–º –æ—Ö–æ—Ç–Ω–∏–∫–∞",
        "inventory": ["ball", "stick", "stick"]
    },
    {
        "id": "admin_house",
        "file": "locations.admin_house",
        "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"
    },
    {
        "id": "forest",
        "file": "locations.forest",
        "name": "–õ–µ—Å"
    },
    {
        "id": "fire",
        "file": "locations.fire",
        "name": "–ö–æ—Å—Ç–µ—Ä"
    },
    {
        "id": "school",
        "file": "locations.school",
        "name": "–£—á–µ–±–∫–∞",
        "inventory": ["guitar", "stick"]
    },
    {
        "id": "sports",
        "file": "locations.sports",
        "name": "–í–æ–ª–µ–π–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ"
    },
]

try:
    with open('users.json', 'r') as file:
        users = json.load(file)
except:
    users = []

try:
    with open('locations.json', 'r') as file:
        locations = json.load(file)
except:
    locations = default_locations

stickers = {
    "nikolay": "CAACAgIAAxkBAAIVGmDYmcLuaWX73R-rLVun5hLgOFKlAAK7AAMTKxwE_BmnnTxRwBwgBA"
}

def find_users_by_location(location_id):
    users_in_location = []

    for user in users:
        if 'location' in user and user['location'] == location_id:
            users_in_location.append(user)

    return users_in_location


def find_location(location_id):
    for location in locations:
        if location['id'] == location_id:
            return location
    return None


def find_user(chat_id):
    for user in users:
        if user['chat_id'] == chat_id:
            return user
    return None


def find_user_by_name(name):
    for user in users:
        if user.get('name') == name:
            return user
    return None


def check_params(user):
    if "inventory" not in user:
        user['inventory'] = ["waterball"]
    if "states" not in user:
        user['states'] = []
    if "eat_points" not in user:
        user["eat_points"] = 100
    if "sleep_points" not in user:
        user["sleep_points"] = 192
    if "code_lines" not in user:
        user["code_lines"] = 0
    if "volleyball_points" not in user:
        user["volleyball_points"] = 0


def init(chat_id):
    user = {
        "chat_id": chat_id
    }

    bot.send_message(chat_id, "üôã‚Äç‚ôÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è...")

    users.append(user)
    return user


def leaderboard():

    actual_users = list(filter(lambda x: 'code_lines' in x and 'volleyball_points' in x, users))

    top_coders = list(sorted(actual_users, key=lambda x: -x['code_lines']))[:5]
    top_sports = list(sorted(actual_users, key=lambda x: -x['volleyball_points']))[:5]

    return "üèÜ –¢–æ–ø –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤:\n\n {}\n\nüèÜ –¢–æ–ø —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:\n\n {}".format(
        '\n'.join(map(lambda x: x['name'], top_coders)), '\n'.join(map(lambda x: x['name'], top_sports)))


def location_list():
    descrition = 'üó∫ –õ–æ–∫–∞—Ü–∏–∏:\n'

    for location in locations:
        descrition += '- {}: {}\n'.format(location['id'], location['name'])

    return descrition


def save_name(user, name):
    user["name"] = name
    user["location"] = "street"
    bot.send_message(user["chat_id"], "ü§ù –†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π, {}! .\n\n{}".format(name, location_list()))
    help(user)


def help(user):
    bot.send_message(user["chat_id"], "–ü–æ–º–æ—â—å:\n\n"
                                      "* /goto –õ–û–ö–ê–¶–ò–Ø - –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–æ–∫–∞—Ü–∏—é;\n"
                                      "* /info - —Å—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞;\n"
                                      "* /leaderboard - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤;\n"
                                      "* /locations - —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π.")


def change_location_by_id(user, location_id):
    location = find_location(location_id)

    if not location:
        bot.send_message(user["chat_id"], "üëÄ –¢–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ—Ç.")
    else:
        neighbors = find_users_by_location(location_id)

        description = "üë´ –° –≤–∞–º–∏ –≤ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏: "
        for neighbor in neighbors:
            if neighbor['chat_id'] != user['chat_id']:
                bot.send_message(neighbor['chat_id'], "{} —Ç–µ–ø–µ—Ä—å –≤ {}!".format(user['name'], location["name"]))
                description += neighbor['name'] + " "
        if len(neighbors) < 2:
            description += "—Ç–æ–ª—å–∫–æ –≤—ã."

        user['location'] = location_id
        bot.send_message(user["chat_id"], "‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ {}.".format(location['name']))
        bot.send_message(user["chat_id"], description)

    return location


def save():
    with open('users.json', 'w') as file:
        json.dump(users, file)
    with open('locations.json', 'w') as file:
        json.dump(locations, file)
